// automatically generated by the FlatBuffers compiler, do not modify

package com.bryan.rpc.common.model.fbs;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class FbsRpcResponse extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static FbsRpcResponse getRootAsFbsRpcResponse(ByteBuffer _bb) { return getRootAsFbsRpcResponse(_bb, new FbsRpcResponse()); }
  public static FbsRpcResponse getRootAsFbsRpcResponse(ByteBuffer _bb, FbsRpcResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FbsRpcResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int result(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int resultLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector resultVector() { return resultVector(new ByteVector()); }
  public ByteVector resultVector(ByteVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer resultAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer resultInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String error() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer errorAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer errorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String requestId() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer requestIdAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer requestIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }

  public static int createFbsRpcResponse(FlatBufferBuilder builder,
      int resultOffset,
      int errorOffset,
      int requestIdOffset) {
    builder.startTable(3);
    FbsRpcResponse.addRequestId(builder, requestIdOffset);
    FbsRpcResponse.addError(builder, errorOffset);
    FbsRpcResponse.addResult(builder, resultOffset);
    return FbsRpcResponse.endFbsRpcResponse(builder);
  }

  public static void startFbsRpcResponse(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addResult(FlatBufferBuilder builder, int resultOffset) { builder.addOffset(0, resultOffset, 0); }
  public static int createResultVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createResultVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startResultVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addError(FlatBufferBuilder builder, int errorOffset) { builder.addOffset(1, errorOffset, 0); }
  public static void addRequestId(FlatBufferBuilder builder, int requestIdOffset) { builder.addOffset(2, requestIdOffset, 0); }
  public static int endFbsRpcResponse(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishFbsRpcResponseBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedFbsRpcResponseBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FbsRpcResponse get(int j) { return get(new FbsRpcResponse(), j); }
    public FbsRpcResponse get(FbsRpcResponse obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

